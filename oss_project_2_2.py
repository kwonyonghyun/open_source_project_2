# -*- coding: utf-8 -*-
"""oss_project_2-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dtNv9bFWEQmfZ_TIWnGznDSL11hwNrFf
"""

import pandas as pd


def sort_dataset(dataset_df):  # year를 기준으로 정렬
    dataset_sorted_by_year = dataset_df.sort_values(by='year')
    return dataset_sorted_by_year  # 이건 맞고


def split_dataset(dataset_df):
    train_dataset = dataset_df.iloc[:1718]
    test_dataset = dataset_df.iloc[1718:]

    # 특성과 타겟 변수 분리
    X_train = train_dataset.drop('salary', axis=1)
    Y_train = train_dataset['salary'] * 0.001
    X_test = test_dataset.drop('salary', axis=1)
    Y_test = test_dataset['salary'] * 0.001

    return X_train, X_test, Y_train, Y_test


def extract_numerical_cols(dataset_df):
    # 'batter_name', 'TB',   'GB',  'BU', 'year','salary',  'year_born', 'hand2', 'cp', 'tp', '1B', 'FBP', 'avg', 'OBP', 'SLG', 'OPS', 'p_year', 'YAB', 'YOPS' 제외시켜야됨
    dataset_df = dataset_df.drop(labels='batter_name', axis=1)
    dataset_df = dataset_df.drop(labels='TB', axis=1)
    dataset_df = dataset_df.drop(labels='GB', axis=1)
    dataset_df = dataset_df.drop(labels='BU', axis=1)
    dataset_df = dataset_df.drop(labels='year', axis=1)
    dataset_df = dataset_df.drop(labels='year_born', axis=1)
    dataset_df = dataset_df.drop(labels='hand2', axis=1)
    dataset_df = dataset_df.drop(labels='cp', axis=1)
    dataset_df = dataset_df.drop(labels='tp', axis=1)
    dataset_df = dataset_df.drop(labels='1B', axis=1)
    dataset_df = dataset_df.drop(labels='FBP', axis=1)
    dataset_df = dataset_df.drop(labels='avg', axis=1)
    dataset_df = dataset_df.drop(labels='OBP', axis=1)
    dataset_df = dataset_df.drop(labels='SLG', axis=1)
    dataset_df = dataset_df.drop(labels='OPS', axis=1)
    dataset_df = dataset_df.drop(labels='p_year', axis=1)
    dataset_df = dataset_df.drop(labels='YAB', axis=1)
    dataset_df = dataset_df.drop(labels='YOPS', axis=1)
    return dataset_df


from sklearn.tree import DecisionTreeRegressor


def train_predict_decision_tree(X_train, Y_train, X_test):
    # TODO: Implement this function
    regressor = DecisionTreeRegressor()
    regressor.fit(X_train, Y_train)
    return regressor.predict(X_test)


from sklearn.ensemble import RandomForestRegressor


def train_predict_random_forest(X_train, Y_train, X_test):
    # TODO: Implement this function
    regressor = RandomForestRegressor()
    regressor.fit(X_train, Y_train)
    return regressor.predict(X_test)


from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline


def train_predict_svm(X_train, Y_train, X_test):
    pipeline = Pipeline([
        ('scaler', StandardScaler()),
        ('svr', SVR())
    ])
    pipeline.fit(X_train, Y_train)
    predictions = pipeline.predict(X_test)
    return predictions


from sklearn.metrics import mean_squared_error
import numpy as np


def calculate_RMSE(labels, predictions):
    mse = mean_squared_error(labels, predictions)
    rmse = np.sqrt(mse)
    return rmse


if __name__ == '__main__':
    # DO NOT MODIFY THIS FUNCTION UNLESS PATH TO THE CSV MUST BE CHANGED.

    file_path = '2019_kbo_for_kaggle_v2.csv'

    data_df = pd.read_csv(file_path)
    sorted_df = sort_dataset(data_df)

    X_train, X_test, Y_train, Y_test = split_dataset(sorted_df)
    X_train = extract_numerical_cols(X_train)
    X_test = extract_numerical_cols(X_test)
    dt_predictions = train_predict_decision_tree(X_train, Y_train, X_test)
    rf_predictions = train_predict_random_forest(X_train, Y_train, X_test)
    svm_predictions = train_predict_svm(X_train, Y_train, X_test)
    print("Decision Tree Test RMSE: ", calculate_RMSE(Y_test, dt_predictions))
    print("Random Forest Test RMSE: ", calculate_RMSE(Y_test, rf_predictions))
    print("SVM Test RMSE: ", calculate_RMSE(Y_test, svm_predictions))
